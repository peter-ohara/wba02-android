apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'


// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

android {
    signingConfigs {
        config {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "com.pascoapp.wba02_android"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 4
        versionName '0.3.0'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        buildConfigField "String", "BASE_URL", '"https://wba02-staging-server.herokuapp.com/android_v1/"'
        resValue "string", "app_name", '"Pasco (Staging)"'
        resValue "string", "action_about", "\"Pasco (Staging) $versionName \""
    }

    buildTypes {
        debug {
            applicationIdSuffix '.debug'
            buildConfigField "String", "BASE_URL", '"http://10.0.2.2:3000/android_v1/"'
            resValue "string", "app_name", '"Pasco (Debug)"'
            resValue "string", "action_about", "\"Pasco (Debug) $versionName \""
        }
        staging {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationIdSuffix '.staging'
            buildConfigField "String", "BASE_URL", '"https://wba02-staging-server.herokuapp.com/android_v1/"'
            resValue "string", "app_name", '"Pasco (Staging)"'
            resValue "string", "action_about", "\"Pasco (Staging) $versionName \""
            signingConfig signingConfigs.config
        }
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            applicationIdSuffix '.release'
            buildConfigField "String", "BASE_URL", '"https://wba02-production-server.herokuapp.com/android_v1/"'
            resValue "string", "app_name", '"Pasco"'
            resValue "string", "action_about", "\"Pasco (Release) $versionName \""
            signingConfig signingConfigs.config
        }
    }

    // Always show the result of every unit test, even if it passes.
    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'skipped', 'failed', 'standardOut', 'standardError'
        }
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

repositories {
    maven { url = "https://jitpack.io" }
    maven { url 'https://maven.fabric.io/public' }
    mavenCentral()
}

/*
 Dependency versions are defined in the top level build.gradle file. This helps keeping track of
 all versions in a single place. This improves readability and helps managing project complexity.
 */
dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile "junit:junit:4.12"

    compile "com.android.support:preference-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support.constraint:constraint-layout:1.0.2"

    // App's dependencies, including test
    compile "com.android.support:appcompat-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:cardview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:design:$rootProject.supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$rootProject.supportLibraryVersion"
    compile "com.android.support:support-v4:$rootProject.supportLibraryVersion"
    compile "com.google.guava:guava:$rootProject.guavaVersion"
    compile "com.github.bumptech.glide:glide:$rootProject.glideVersion"
    compile "com.android.support.test.espresso:espresso-idling-resource:$rootProject.ext.espressoVersion"

    // Dependencies for local unit tests
    testCompile "junit:junit:$rootProject.ext.junitVersion"
    testCompile "org.mockito:mockito-all:$rootProject.ext.mockitoVersion"
    testCompile "org.hamcrest:hamcrest-all:$rootProject.ext.hamcrestVersion"
    testCompile "org.powermock:powermock-module-junit4:$rootProject.ext.powerMockito"
    testCompile "org.powermock:powermock-api-mockito:$rootProject.ext.powerMockito"

    // Android Testing Support Library's runner and rules
    androidTestCompile "com.android.support.test:runner:$rootProject.ext.runnerVersion"
    androidTestCompile "com.android.support.test:rules:$rootProject.ext.rulesVersion"

    // Espresso UI Testing dependencies.
    androidTestCompile "com.android.support.test.espresso:espresso-core:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-contrib:$rootProject.ext.espressoVersion"
    androidTestCompile "com.android.support.test.espresso:espresso-intents:$rootProject.ext.espressoVersion"


    // Firebase Core
    compile "com.google.firebase:firebase-core:$rootProject.firebaseVersion"

    // Firebase Realtime Database
    compile "com.google.firebase:firebase-database:$rootProject.firebaseVersion"

    // Firebase Notifications
    compile "com.google.firebase:firebase-messaging:$rootProject.firebaseVersion"

    // Firebase Crash Reporting
    compile "com.google.firebase:firebase-crash:$rootProject.firebaseVersion"

    // Firebase Auth
    compile "com.google.firebase:firebase-auth:$rootProject.firebaseVersion"
    compile "com.google.android.gms:play-services-auth:$rootProject.firebaseVersion"

    //Firebase Invites
    compile "com.google.firebase:firebase-invites:$rootProject.firebaseVersion"

    // FirebaseUI Auth
    compile "com.firebaseui:firebase-ui-auth:$rootProject.firebaseUiVersion"

    // FirebaseUI Database
    compile "com.firebaseui:firebase-ui-database:$rootProject.firebaseUiVersion"

    // Library for colored Square Icons with letter inside like in gmail
    compile "com.amulyakhare:com.amulyakhare.textdrawable:1.0.1"

    // RxAndroid and RxJava
    compile "io.reactivex:rxandroid:1.2.1"
    compile "io.reactivex:rxjava:1.1.6"

    // And ProGuard rules for RxJava!
    compile "com.artemzin.rxjava:proguard-rules:1.2.4.0"

    // View Injection
    compile "com.jakewharton:butterknife:8.5.1"
    annotationProcessor "com.jakewharton:butterknife-compiler:8.5.1"

    // Lombok
    provided "org.projectlombok:lombok:1.16.10"

    // Chunk Templating Engine
    compile "com.x5dev:chunk-templates:3.2.3"

    // AVloadingIndicator
    compile "com.wang.avi:library:2.1.3"

    // EazeGraph charting library
    compile "com.github.blackfizz:eazegraph:1.2.5l@aar"
    compile "com.nineoldandroids:library:2.4.0"

    // REST Interactions
    compile "com.squareup.retrofit2:retrofit:$rootProject.retrofitVersion"
    compile "com.squareup.retrofit2:adapter-rxjava:$rootProject.retrofitVersion"
    compile "com.squareup.okhttp3:logging-interceptor:3.6.0"

    // JSON Parsing
    compile "com.google.code.gson:gson:2.6.1"
    compile "com.squareup.retrofit2:converter-gson:$rootProject.retrofitVersion"

    // Logging
    compile "com.jakewharton.timber:timber:4.5.1"
}

/*
Resolves dependency versions across test and production APKs, specifically, transitive
dependencies. This is required since Espresso internally has a dependency on support-annotations.
*/
configurations.all {
    resolutionStrategy.force "com.android.support:support-annotations:$rootProject.supportLibraryVersion"
}

/*
All direct/transitive dependencies shared between your test and production APKs need to be
excluded from the test APK! This is necessary because both APKs will contain the same classes. Not
excluding these dependencies from your test configuration will result in an dex pre-verifier error
at runtime. More info in this tools bug: (https://code.google.com/p/android/issues/detail?id=192497)
*/
configurations.compile.dependencies.each { compileDependency ->
    println "Excluding compile dependency: ${compileDependency.getName()}"
    configurations.androidTestCompile.dependencies.each { androidTestCompileDependency ->
        configurations.androidTestCompile.exclude module: "${compileDependency.getName()}"
    }
}


apply plugin: 'com.google.gms.google-services'
